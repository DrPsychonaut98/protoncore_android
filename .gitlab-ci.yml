include:
  - project: 'agarroux/publish-github'
    ref: master
    file: '/jobs/release.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'ProtonVPN/android/android-app-new'
    ref: development
    file: '/appetize-integration.yml'

  - local: '/ci/templates/git.gitlab-ci.yml'

  - local: '/ci/templates/base-job.gitlab-ci.yml'

  - project: 'proton/devops/atlas-deploy'
    ref: main
    file: '/scenarios/pipeline-env.yml'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME =~ /^release/
    - if: $CI_COMMIT_REF_NAME == 'main'

stages:
  - prepare
  - bot
  - deploy
  - build
  - test
  - firebase
  - publish
  - review
  - cleanup

variables:
  # Use fastzip to improve cache times
  FF_USE_FASTZIP: "true"
  # Output upload and download progress every 5 seconds
  TRANSFER_METER_FREQUENCY: "5s"
  # Use no compression for artifacts
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  # Use low compression for caches
  CACHE_COMPRESSION_LEVEL: "fast"

## pre stage #######################################################################################
prepare-environment:
  tags:
    - small
  extends: .script-job
  stage: prepare
  when: always
  image: $CI_REGISTRY/proton/devops/atlas-cli
  variables:
    NAMESERVICE_URL: "https://nameservice.$ATLAS_BASE_DOMAIN/api/env"
    REQUEST_DATA: "--header 'Content-Type:application/x-www-form-urlencoded' --data app=${CI_PROJECT_PATH} --data branch=${CI_COMMIT_REF_SLUG} --data tag=${CI_COMMIT_REF_SLUG}"
  script:
    - |
      if [ $CI_PIPELINE_SOURCE == "merge_request_event" ]; then
        get_name.py -v -o deploy.env -d "$ATLAS_BASE_DOMAIN" --release "$ATLAS_RELEASE_SUFFIX" "${ENV_TAG:-$CI_COMMIT_REF_SLUG}" "$CI_PROJECT_PATH" "$CI_COMMIT_REF_SLUG"
        export $(cat deploy.env)
        echo PROXY_TOKEN="$(curl -o - https://proxy.$ATLAS_BASE_DOMAIN/token/get)" >> local.properties
        echo HOST="$DYNAMIC_DOMAIN" >> local.properties
        mkdir -p coreexample/src/androidTest/assets/sensitive
        cat $TEST_USERS > coreexample/src/androidTest/assets/sensitive/users.json
        cat $TEST_INTERNAL_API > coreexample/src/androidTest/assets/sensitive/internal_apis.json
      else
        echo "No need to prepare env"
      fi
  artifacts:
    paths:
      - coreexample/src/androidTest/assets/sensitive
      - local.properties
    reports:
      dotenv: deploy.env
    expire_in: never

detekt-analyze:
  extends: .gradle-job
  stage: prepare
  when: always
  interruptible: true
  script:
    - ./gradlew multiModuleDetekt
  artifacts:
    expire_in: 1 month
    reports:
      codequality: config/detekt/reports/mergedReport.json

## bot stage #######################################################################################
i18n-sync-crowdin:
  extends: .i18n-sync-crowdin-common
  variables:
    I18N_SYNC_CROWDIN_PROJECT: 'android-core'
    I18N_SYNC_BRANCH: 'main'
    I18N_FILTER_OUT_ITEMS: 'coreexample'

i18n-commit-locales:
  extends: .i18n-commit-locales-shared
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: 'android-core'
    I18N_COMMIT_BRANCH_PUSH: 'main'
    I18N_COMMIT_BRANCH_ALLOWED: 'main'

## deploy stage ####################################################################################
deploy:review:
  tags:
    - medium
  allow_failure: true
  retry: 1
  needs:
    - job: prepare-environment
      artifacts: true
  rules:
    # We deploy automatically if the ATLAS_DEPLOY_ENV variable is set to true
    - if: $ATLAS_DEPLOY_ENV == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    # But never otherwise
    - when: never

## build stage #####################################################################################
assemble:
  extends: .gradle-job
  stage: build
  needs:
    - detekt-analyze
    - job: prepare-environment
      artifacts: true
  interruptible: true
  script:
    - ./gradlew :coreexample:assembleLocalPropertiesDebug
    - ./gradlew :coreexample:assembleLocalPropertiesDebugAndroidTest
  artifacts:
    paths:
      - coreexample/build/outputs/

## test stage ######################################################################################
unit-tests-and-coverage-report:
  extends: .gradle-job
  needs:
    - assemble
  stage: test
  script:
    - ./gradlew -Pci --console=plain coberturaCoverageReport # This also runs allTest
  coverage: /Total.*?(\d{1,3}\.\d{0,2})%/
  interruptible: true
  artifacts:
    expire_in: 1 week
    paths:
      - ./build/reports/*
    reports:
      cobertura:
        - ./build/reports/cobertura-coverage.xml

start-review:
  image: ${CI_REGISTRY}/android/shared/docker-android:v1.0.0
  needs:
    - assemble
  before_script:
    - source /load-env.sh
    - export REVIEW_APP_ARTIFACT_PATH="coreexample/build/outputs/apk/localProperties/debug/coreexample-localProperties-debug.apk"
  extends: .startReview
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

binary-compatibility-check:
  extends: .gradle-job
  stage: test
  needs:
    - assemble
  tags:
    - xlarge-k8s
  script:
    - ./gradlew apiCheck

trigger-client-integration-tests:
  extends: .script-job
  stage: test
  when: manual
  tags:
    - xlarge-k8s
  cache: []
  before_script:
    - source /load-env.sh
  script:
    - echo "Trigger all clients integration tests"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.client-integration-tests:
  needs:
    - trigger-client-integration-tests
  inherit:
    variables: false
  variables:
    CORE_COMMIT_SHA: $CI_COMMIT_SHA
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

mail-v6-integration-tests:
  extends: .client-integration-tests
  trigger:
    project: android/mail/proton-mail
    branch: master

## firebase stage ##################################################################################
.firebase-tests-common:
  stage: firebase
  when: always
  image: ${CI_REGISTRY}/android/shared/docker-android:v1.0.0
  variables:
    RESULTS_DIR: "${CI_COMMIT_REF_SLUG}/${CI_COMMIT_SHORT_SHA}/${CI_JOB_NAME}"
  tags:
    - medium
  allow_failure: true
  script:
    - gcloud config set project $CLOUD_PROJECT_ID_CORE
    - gcloud auth activate-service-account --key-file $GOOGLE_SERVICE_ACCOUNT
    - gcloud firebase test android run
      --app coreexample/build/outputs/apk/localProperties/debug/coreexample-localProperties-debug.apk
      --test coreexample/build/outputs/apk/androidTest/localProperties/debug/coreexample-localProperties-debug-androidTest.apk
      --device model=Pixel2,version=28
      --test-targets "$TEST_TARGET"
      --timeout 25m
      --results-dir=$RESULTS_DIR
  after_script:
    - mkdir -p screenshots
    - mkdir -p logs
    - gsutil cp $FIREBASE_BUCKET_URL/$RESULTS_DIR/Pixel2-28-en-portrait/logcat logcat.txt
    - gsutil cp $FIREBASE_BUCKET_URL/$RESULTS_DIR/Pixel2-28-en-portrait/video.mp4 video.mp4
    - gsutil cp $FIREBASE_BUCKET_URL/$RESULTS_DIR/Pixel2-28-en-portrait/test_result_1.xml test_result_1.xml
    - gsutil -m cp -r $FIREBASE_BUCKET_URL/$RESULTS_DIR/Pixel2-28-en-portrait/test_cases ./logs
    - gsutil -m cp -r $FIREBASE_BUCKET_URL/$RESULTS_DIR/Pixel2-28-en-portrait/artifacts/sdcard/screenshots ./screenshots 2> /dev/null || true
    - python3 coreexample/ci/process_report.py test_result_1.xml test_result.xml
  needs:
    - assemble
    - deploy:review
  artifacts:
    when: always
    reports:
      junit: test_result.xml
    paths:
      - screenshots
      - logcat.txt
      - video.mp4
      - logs
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

uitest:signup:
  variables:
    TEST_TARGET: "package me.proton.core.test.android.uitests.tests.medium.auth.signup"
  extends: .firebase-tests-common

uitest:login:
  variables:
    TEST_TARGET: "package me.proton.core.test.android.uitests.tests.medium.auth.login"
  extends: .firebase-tests-common

uitest:payments:
  variables:
    TEST_TARGET: "package me.proton.core.test.android.uitests.tests.medium.payments"
  extends: .firebase-tests-common

uitest:plans:
  variables:
    TEST_TARGET: "package me.proton.core.test.android.uitests.tests.medium.plans"
  extends: .firebase-tests-common

uitest:usersettings:
  variables:
    TEST_TARGET: "package me.proton.core.test.android.uitests.tests.medium.usersettings"
  extends: .firebase-tests-common

## publish stage ###################################################################################
release-publish-github:
  stage: publish
  tags:
    - xlarge-k8s
  variables:
    RELEASE_SYNC_PUBLIC_URL: git@github.com:ProtonMail/protoncore_android.git
    RELEASE_SYNC_TO_BRANCH: 'main'
    RELEASE_SYNC_FROM_BRANCH: 'main'
  extends: .release-sync-commit-shared

publish-libs:
  extends: .gradle-job
  stage: publish
  variables:
    ORG_GRADLE_PROJECT_mavenCentralUsername: $MAVEN_USER
    ORG_GRADLE_PROJECT_mavenCentralPassword: $MAVEN_PASSWORD
    ORG_GRADLE_PROJECT_signingInMemoryKey: $MAVEN_SIGNING_KEY
    ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: $MAVEN_SIGNING_KEY_PASSWORD
    ORG_GRADLE_PROJECT_androidDevChannelWebhook: $ANDROID_DEVS_CHANNEL_WEBHOOK
  script:
    - ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
    - ./gradlew notifyNewRelease
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/libs\/.*/ # stable release with notification
    - if: $CI_COMMIT_BRANCH == 'main' # main-snapshot release without notification

tag-libs-release:
  extends: .gradle-job
  stage: publish
  needs:
    - job: publish-libs
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/libs\/.*/
  before_script:
    - !reference [ .git, before_script ]
  script:
    - ./gradlew tagRelease

publish-gradle-plugins:
  extends: .gradle-job
  stage: publish
  variables:
    ORG_GRADLE_PROJECT_mavenCentralUsername: $MAVEN_USER
    ORG_GRADLE_PROJECT_mavenCentralPassword: $MAVEN_PASSWORD
    ORG_GRADLE_PROJECT_signingInMemoryKey: $MAVEN_SIGNING_KEY
    ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: $MAVEN_SIGNING_KEY_PASSWORD
  script:
    - ./gradlew -p plugins publishToSonatype closeAndReleaseSonatypeStagingRepository
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/gradle-plugins\/.*/ # stable release with notification
    - if: $CI_COMMIT_BRANCH == 'main' # main-snapshot release without notification

tag-gradle-plugins-release:
  extends: .gradle-job
  stage: publish
  needs:
    - job: publish-gradle-plugins
  before_script:
    - !reference [ .git, before_script ]
  script:
    - ./gradlew -p plugins tagRelease
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/gradle-plugins\/.*/

## review stage ######################################################################################
danger-review:
  tags:
    - medium
  extends: .ruby-job
  stage: review
  when: always
  needs:
    - unit-tests-and-coverage-report
  script:
    - bundle exec danger --fail-on-errors=false
  allow_failure: true
  variables:
    DANGER_GITLAB_API_TOKEN: $DANGER_GITLAB_API_TOKEN
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

## cleanup stage ###################################################################################
cleanup:review:
  tags:
    - medium
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true

# .startReview requires 'stopReview' job. See GitLab merged YAML.
stopReview:
  extends: .stopReview
  stage: cleanup
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
