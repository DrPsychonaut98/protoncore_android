public class hilt_aggregated_deps/_me_proton_core_network_dagger_CoreNetworkCryptoModule {
	public fun <init> ()V
}

public class hilt_aggregated_deps/_me_proton_core_network_dagger_CoreNetworkModule {
	public fun <init> ()V
}

public final class me/proton/core/network/dagger/BuildConfig {
	public static final field BUILD_TYPE Ljava/lang/String;
	public static final field DEBUG Z
	public static final field LIBRARY_PACKAGE_NAME Ljava/lang/String;
	public fun <init> ()V
}

public final class me/proton/core/network/dagger/CoreNetworkCryptoModule {
	public fun <init> ()V
}

public final class me/proton/core/network/dagger/CoreNetworkCryptoModule_ProvideServerTimeListener$network_dagger_releaseFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkCryptoModule;Ljavax/inject/Provider;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkCryptoModule;Ljavax/inject/Provider;)Lme/proton/core/network/dagger/CoreNetworkCryptoModule_ProvideServerTimeListener$network_dagger_releaseFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/domain/server/ServerTimeListener;
	public static fun provideServerTimeListener$network_dagger_release (Lme/proton/core/network/dagger/CoreNetworkCryptoModule;Lme/proton/core/crypto/common/context/CryptoContext;)Lme/proton/core/network/domain/server/ServerTimeListener;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideApiProviderFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideApiProviderFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/data/ApiProvider;
	public static fun provideApiProvider (Lme/proton/core/network/dagger/CoreNetworkModule;Lme/proton/core/network/data/ApiManagerFactory;Lme/proton/core/network/domain/session/SessionProvider;)Lme/proton/core/network/data/ApiProvider;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideClientIdProviderFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideClientIdProviderFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/domain/client/ClientIdProvider;
	public static fun provideClientIdProvider (Lme/proton/core/network/dagger/CoreNetworkModule;Lokhttp3/HttpUrl;Lme/proton/core/network/data/ProtonCookieStore;)Lme/proton/core/network/domain/client/ClientIdProvider;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideClientVersionValidatorFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideClientVersionValidatorFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/domain/client/ClientVersionValidator;
	public static fun provideClientVersionValidator (Lme/proton/core/network/dagger/CoreNetworkModule;)Lme/proton/core/network/domain/client/ClientVersionValidator;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideCookieJarFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;Ljavax/inject/Provider;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;Ljavax/inject/Provider;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideCookieJarFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/data/ProtonCookieStore;
	public static fun provideCookieJar (Lme/proton/core/network/dagger/CoreNetworkModule;Landroid/content/Context;Lme/proton/core/util/kotlin/CoroutineScopeProvider;)Lme/proton/core/network/data/ProtonCookieStore;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideNetworkManagerFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideNetworkManagerFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/domain/NetworkManager;
	public static fun provideNetworkManager (Lme/proton/core/network/dagger/CoreNetworkModule;Landroid/content/Context;)Lme/proton/core/network/domain/NetworkManager;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideNetworkPrefsFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;Ljavax/inject/Provider;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideNetworkPrefsFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lme/proton/core/network/domain/NetworkPrefs;
	public static fun provideNetworkPrefs (Lme/proton/core/network/dagger/CoreNetworkModule;Landroid/content/Context;)Lme/proton/core/network/domain/NetworkPrefs;
}

public final class me/proton/core/network/dagger/CoreNetworkModule_ProvideOkHttpClientFactory : dagger/internal/Factory {
	public fun <init> (Lme/proton/core/network/dagger/CoreNetworkModule;)V
	public static fun create (Lme/proton/core/network/dagger/CoreNetworkModule;)Lme/proton/core/network/dagger/CoreNetworkModule_ProvideOkHttpClientFactory;
	public synthetic fun get ()Ljava/lang/Object;
	public fun get ()Lokhttp3/OkHttpClient;
	public static fun provideOkHttpClient (Lme/proton/core/network/dagger/CoreNetworkModule;)Lokhttp3/OkHttpClient;
}

